"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const QueryStateName_1 = require("./QueryStateName");
/**
 * Statemachine implementation for the Azurite query transcriber.
 *
 * @export
 * @class QueryTranscriber
 */
class QueryTranscriber {
    constructor(queryContext, name) {
        this.states = new Map();
        this.isSwitchingState = false;
        this.queryContext = queryContext;
        this.name = name !== null && name !== void 0 ? name : "machine";
        this.currentState = {
            name: QueryStateName_1.QueryStateName.None,
            onProcess: (context) => {
                return context;
            },
            onExit: (context) => {
                return context;
            }
        };
    }
    isCurrentState(name) {
        var _a;
        return ((_a = this.currentState) === null || _a === void 0 ? void 0 : _a.name) === name;
    }
    /**
     * Add a state to the machine.
     *
     * @param {string} name
     * @param {IQPState} state - The state to add.
     * @return {QueryTranscriber}
     * @memberof LokiJsQueryTranscriber
     */
    addState(name, config) {
        var _a, _b;
        this.states.set(name, {
            name,
            onProcess: (_a = config.onProcess) === null || _a === void 0 ? void 0 : _a.bind(this.queryContext),
            onExit: (_b = config.onExit) === null || _b === void 0 ? void 0 : _b.bind(this.queryContext)
        });
        return this;
    }
    /**
     * Switch to the state with the given name.
     *
     * @param {string} name,
     * @param {QueryContext} queryContext
     * @return {QueryTranscriber}
     * @memberof LokiJsQueryTranscriber
     */
    setState(name) {
        if (this.states.has(name) === false) {
            // This is a case which should only occur in testing
            // or when adding new states.
            // We do not expect to see this during run time!
            throw new Error("Invalid State Name!");
        }
        if (this.isSwitchingState) {
            this.queryContext.stateQueue.push(name);
            return this;
        }
        this.switchState(name);
        // processes state queue
        // if there is a problem with state transitions, recursive call of
        // setState will cause a stack overflow, which is OK:
        // as otherwise we would hang the process...
        while (this.queryContext.stateQueue.length > 0) {
            if (this.queryContext.stateQueue.length > 0) {
                const newState = this.queryContext.stateQueue.shift();
                this.setState(newState);
            }
        }
        this.currentState.onExit(this.queryContext);
        return this;
    }
    /**
     * switches states by exiting last state and processing new state
     *
     * @private
     * @param {QueryStateName} name
     * @memberof QueryTranscriber
     */
    switchState(name) {
        this.isSwitchingState = true;
        this.queryContext = this.currentState.onExit(this.queryContext);
        const state = this.states.get(name);
        this.updateState(state, name);
        this.queryContext = this.currentState.onProcess(this.queryContext);
        this.isSwitchingState = false;
    }
    updateState(state, name) {
        if (state !== undefined) {
            this.currentState = state;
        }
        else {
            throw Error(`${this.name} does not have a state named ${name}`);
        }
    }
    /**
     * Returns the query transcribed by the state machine.
     *
     * @return {*}  {string}
     * @memberof LokiJsQueryTranscriber
     */
    getTranscribedQuery() {
        if (this.queryContext === undefined ||
            this.queryContext.transcribedQuery === "") {
            throw new Error("Query failed to be transcribed!");
        }
        return this.queryContext.transcribedQuery;
    }
    /**
     *
     *
     * @param {QueryStateName} name
     * @memberof LokiJsQueryTranscriber
     */
    setInitialState(name) {
        this.queryContext.stateQueue.push(name);
    }
}
exports.default = QueryTranscriber;
//# sourceMappingURL=QueryTranscriber.js.map