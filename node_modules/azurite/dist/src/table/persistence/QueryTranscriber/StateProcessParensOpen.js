"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const QPState_1 = tslib_1.__importDefault(require("./QPState"));
const QueryStateName_1 = require("./QueryStateName");
const TaggedToken_1 = tslib_1.__importDefault(require("./TokenModel/TaggedToken"));
const TokenMap_1 = require("./PredicateModel/TokenMap");
const ParensOpenToken_1 = tslib_1.__importDefault(require("./TokenModel/ParensOpenToken"));
const ParensOpen_1 = tslib_1.__importDefault(require("./PredicateModel/ParensOpen"));
/**
 * contains the logic for parens open
 *
 * @export
 * @class StateProcessParensOpen
 * @extends {QPState}
 * @implements {IQPState}
 */
class StateProcessParensOpen extends QPState_1.default {
    constructor() {
        super(...arguments);
        this.name = QueryStateName_1.QueryStateName.ProcessParensOpen;
        /**
         * process current query token which is operator
         *
         * @param {QueryContext} context
         * @memberof StateProcessOperator
         */
        this.onProcess = (context) => {
            let token = "";
            [context, token] = this.getNextToken(context);
            context = this.storeTaggedTokens(context, token);
            [context, token] = this.getNextToken(context);
            context = this.handleToken(context, token);
            return context;
        };
        /**
         * optional post processing, here we can add logging
         * or additional validation etc
         *
         * @param {QueryContext} context
         * @memberof StateProcessValue
         */
        this.onExit = (context) => {
            return context;
        };
    }
    /**
     * state transition logic
     *
     * @protected
     * @param {QueryContext} context
     * @param {string} token
     * @return {*}  {QueryContext}
     * @memberof StateProcessParensOpen
     */
    handleToken(context, token) {
        // Parens Open will always start a predicate
        context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateStarted);
        return context;
    }
    /**
     * Stores the tokens
     *
     * @private
     * @param {QueryContext} context
     * @param {string} token
     * @return {*}  {QueryContext}
     * @memberof StateProcessParensOpen
     */
    storeTaggedTokens(context, token) {
        // predicate operator should be stored singly
        const taggedToken = new TaggedToken_1.default(token, new ParensOpenToken_1.default());
        context.taggedPredicates.push(new ParensOpen_1.default(new TokenMap_1.TokenMap([taggedToken])));
        context.currentPredicate += 1;
        context.currentPos += 1; // increment for parens
        return context;
    }
}
exports.default = StateProcessParensOpen;
//# sourceMappingURL=StateProcessParensOpen.js.map