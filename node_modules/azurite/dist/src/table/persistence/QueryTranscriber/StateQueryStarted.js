"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const QPState_1 = tslib_1.__importDefault(require("./QPState"));
const QueryStateName_1 = require("./QueryStateName");
/**
 * This is the first state of the query processing
 *
 * @export
 * @class StateQueryStarted
 * @extends {QPState}
 * @implements {IQPState}
 */
class StateQueryStarted extends QPState_1.default {
    constructor() {
        super(...arguments);
        this.name = QueryStateName_1.QueryStateName.QueryStarted;
        /**
         * start the processing and state machine
         *
         * @memberof StateQueryStarted
         */
        this.onProcess = (context) => {
            let token = "";
            [context, token] = this.getNextToken(context);
            context = this.handleToken(context, token);
            return context;
        };
        /**
         * optional post processing, here we can add logging
         * or additional validation etc
         *
         * @param {QueryContext} context
         * @memberof StateProcessValue
         */
        this.onExit = (context) => {
            return context;
        };
    }
    /**
     * State transition logic
     *
     * @protected
     * @param {QueryContext} context
     * @param {string} token
     * @return {*}  {QueryContext}
     * @memberof StateQueryStarted
     */
    handleToken(context, token) {
        // categorize the token
        if (token === "") {
            context.stateQueue.push(QueryStateName_1.QueryStateName.QueryFinished);
        }
        else if (token === "(") {
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateStarted);
        }
        else if (token === ")") {
            throw new Error("Invalid Query, starting with parens close!");
        }
        else if (this.isPredicateOperator(token)) {
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateStarted);
        }
        else if (this.isOperand(token)) {
            // match operand (specific set)
            throw new Error("Invalid Query, starting with operand!");
        }
        else if (this.isValue(token)) {
            // match number (long & doubles? needed)
            // match string (starts with ', or " ?)
            // match guid (is exactly guid'<guidval>')
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateStarted);
        }
        else if (this.isIdentifier(token)) {
            // match identifier (can only start with letter)
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateStarted);
        }
        return context;
    }
}
exports.default = StateQueryStarted;
//# sourceMappingURL=StateQueryStarted.js.map