"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const QPState_1 = tslib_1.__importDefault(require("./QPState"));
const QueryStateName_1 = require("./QueryStateName");
const TaggedToken_1 = tslib_1.__importDefault(require("./TokenModel/TaggedToken"));
const IdentifierToken_1 = tslib_1.__importDefault(require("./TokenModel/IdentifierToken"));
const UnknownPredicate_1 = tslib_1.__importDefault(require("./PredicateModel/UnknownPredicate"));
const TokenMap_1 = require("./PredicateModel/TokenMap");
/**
 * contains the logic to handle an identifier
 *
 * @export
 * @class StateProcessIdentifier
 * @extends {QPState}
 * @implements {IQPState}
 */
class StateProcessIdentifier extends QPState_1.default {
    constructor() {
        super(...arguments);
        this.name = QueryStateName_1.QueryStateName.ProcessIdentifier;
        /**
         * process current token which is an identifier
         *
         * @param {QueryContext} context
         * @memberof StateProcessIdentifier
         */
        this.onProcess = (context) => {
            let token = "";
            [context, token] = this.getNextToken(context);
            context = this.storeTaggedTokens(context, token);
            [context, token] = this.getNextToken(context);
            context = this.handleToken(context, token);
            return context;
        };
        /**
         * optional post processing, here we can add logging
         * or additional validation etc
         *
         * @param {QueryContext} context
         * @memberof StateProcessValue
         */
        this.onExit = (context) => {
            return context;
        };
    }
    /**
     * state transition logic
     *
     * @protected
     * @param {QueryContext} context
     * @param {string} token
     * @return {*}  {QueryContext}
     * @memberof StateProcessIdentifier
     */
    handleToken(context, token) {
        // categorize the token
        if (token === "") {
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateFinished);
        }
        else if (token === "(") {
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateStarted);
        }
        else if (token === ")") {
            context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateFinished);
        }
        else if (this.isPredicateOperator(token)) {
            if (this.name === QueryStateName_1.QueryStateName.PredicateFinished) {
                context.stateQueue.push(QueryStateName_1.QueryStateName.ProcessPredicateOperator);
            }
            else {
                context.stateQueue.push(QueryStateName_1.QueryStateName.PredicateFinished);
            }
            // will need to end current predicate and create a new predicate
        }
        else if (this.isOperand(token)) {
            // match operand (specific set)
            context.stateQueue.push(QueryStateName_1.QueryStateName.ProcessOperator);
        }
        else if (this.isValue(token)) {
            // match number (long & doubles? needed)
            // match string (starts with ', or " ?)
            // match guid (is exactly guid'<guidval>')
            context.stateQueue.push(QueryStateName_1.QueryStateName.ProcessValue);
        }
        else if (this.isIdentifier(token)) {
            // match identifier (can only start with letter)
            context.stateQueue.push(QueryStateName_1.QueryStateName.ProcessIdentifier);
        }
        return context;
    }
    /**
     * stores the token as an identifier
     *
     * @private
     * @param {QueryContext} context
     * @param {string} token
     * @return {*}  {QueryContext}
     * @memberof StateProcessIdentifier
     */
    storeTaggedTokens(context, token) {
        token = this.updateTableIdentifier(context, token);
        const taggedToken = new TaggedToken_1.default(token, new IdentifierToken_1.default());
        context = this.startNewPredicate(context);
        const taggedTokens = this.updateTaggedTokens(context, taggedToken);
        context = this.updateTaggedPredicate(taggedTokens, context);
        context.currentPos += token.length;
        return context;
    }
    updateTableIdentifier(context, token) {
        if (context.isTableQuery && token.toLowerCase() === "tablename") {
            token = "**blena**";
        }
        return token;
    }
    /**
     * This determines if we need to start a new predicate clause
     *
     * @private
     * @param {QueryContext} context
     * @return {*}  {QueryContext}
     * @memberof StateProcessIdentifier
     */
    startNewPredicate(context) {
        if (context.taggedPredicates[context.currentPredicate] !== undefined &&
            context.taggedPredicates[context.currentPredicate].tokenMap.tokens
                .length !== 0 &&
            (context.taggedPredicates[context.currentPredicate].tokenMap.tokens[0].type.isParensOpen() ||
                context.taggedPredicates[context.currentPredicate].tokenMap.tokens[0].type.isParensClose() ||
                context.taggedPredicates[context.currentPredicate].tokenMap.tokens[0].type.isOperator())) {
            context.taggedPredicates.push(new UnknownPredicate_1.default(new TokenMap_1.TokenMap([])));
            context.currentPredicate += 1;
        }
        return context;
    }
}
exports.default = StateProcessIdentifier;
//# sourceMappingURL=StateProcessIdentifier.js.map