"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const QueryContext_1 = tslib_1.__importDefault(require("./QueryContext"));
const QueryStateName_1 = require("./QueryStateName");
const StatePredicateFinished_1 = tslib_1.__importDefault(require("./StatePredicateFinished"));
const StatePredicateStarted_1 = tslib_1.__importDefault(require("./StatePredicateStarted"));
const StateProcessIdentifier_1 = tslib_1.__importDefault(require("./StateProcessIdentifier"));
const StateProcessOperator_1 = tslib_1.__importDefault(require("./StateProcessOperator"));
const StateProcessValue_1 = tslib_1.__importDefault(require("./StateProcessValue"));
const StateQueryFinished_1 = tslib_1.__importDefault(require("./StateQueryFinished"));
const StateQueryStarted_1 = tslib_1.__importDefault(require("./StateQueryStarted"));
const LokiJsQueryTranscriber_1 = tslib_1.__importDefault(require("./LokiJsQueryTranscriber"));
const StateProcessPredicateOperator_1 = tslib_1.__importDefault(require("./StateProcessPredicateOperator"));
const StateProcessParensOpen_1 = tslib_1.__importDefault(require("./StateProcessParensOpen"));
const StateProcessParensClose_1 = tslib_1.__importDefault(require("./StateProcessParensClose"));
class LokiJsQueryTranscriberFactory {
    static createEntityQueryTranscriber(queryString, name = "entity query transcriber") {
        // initializes the data state for the query transcriber state machine
        const queryContext = new QueryContext_1.default(queryString);
        const transcriber = new LokiJsQueryTranscriber_1.default(queryContext, name);
        // Add the states to the transcriber.
        transcriber.addState(QueryStateName_1.QueryStateName.QueryStarted, new StateQueryStarted_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.ProcessParensOpen, new StateProcessParensOpen_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.ProcessParensClose, new StateProcessParensClose_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.PredicateStarted, new StatePredicateStarted_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.ProcessIdentifier, new StateProcessIdentifier_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.ProcessOperator, new StateProcessOperator_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.ProcessPredicateOperator, new StateProcessPredicateOperator_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.ProcessValue, new StateProcessValue_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.PredicateFinished, new StatePredicateFinished_1.default());
        transcriber.addState(QueryStateName_1.QueryStateName.QueryFinished, new StateQueryFinished_1.default());
        return transcriber;
    }
    // ToDo: need to observe system props and not allow custom props
    static createTableQueryTranscriber(queryString, name = "table query transcriber") {
        // initializes the data state for the query transcriber state machine
        const queryContext = new QueryContext_1.default(queryString, true);
        const transcriber = new LokiJsQueryTranscriber_1.default(queryContext, name);
        // Add the states to the transcriber.
        transcriber
            .addState(QueryStateName_1.QueryStateName.QueryStarted, new StateQueryStarted_1.default())
            .addState(QueryStateName_1.QueryStateName.ProcessParensOpen, new StateProcessParensOpen_1.default())
            .addState(QueryStateName_1.QueryStateName.ProcessParensClose, new StateProcessParensClose_1.default())
            .addState(QueryStateName_1.QueryStateName.PredicateStarted, new StatePredicateStarted_1.default())
            .addState(QueryStateName_1.QueryStateName.ProcessIdentifier, new StateProcessIdentifier_1.default())
            .addState(QueryStateName_1.QueryStateName.ProcessOperator, new StateProcessOperator_1.default())
            .addState(QueryStateName_1.QueryStateName.ProcessPredicateOperator, new StateProcessPredicateOperator_1.default())
            .addState(QueryStateName_1.QueryStateName.ProcessValue, new StateProcessValue_1.default())
            .addState(QueryStateName_1.QueryStateName.PredicateFinished, new StatePredicateFinished_1.default())
            .addState(QueryStateName_1.QueryStateName.QueryFinished, new StateQueryFinished_1.default());
        return transcriber;
    }
}
exports.default = LokiJsQueryTranscriberFactory;
//# sourceMappingURL=LokiJsQueryTranscriberFactory.js.map