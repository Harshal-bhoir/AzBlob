"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const TaggedToken_1 = tslib_1.__importDefault(require("../TokenModel/TaggedToken"));
const IdentifierToken_1 = tslib_1.__importDefault(require("../TokenModel/IdentifierToken"));
const ValueToken_1 = tslib_1.__importDefault(require("../TokenModel/ValueToken"));
class LongPredicate {
    constructor(tokenMap) {
        this.tokenMap = tokenMap;
    }
    /**
     * converts a long predicate for lokijs schema
     *
     * @return {*}
     * @memberof LongPredicate
     */
    convertPredicateForLokiJS() {
        const newTokens = [];
        this.tokenMap.tokens.forEach((taggedToken) => {
            this.pushValue(taggedToken, newTokens);
            this.pushIdentifier(taggedToken, newTokens);
            this.pushOperator(taggedToken, newTokens);
        });
        this.tokenMap.tokens = newTokens;
        return this;
    }
    /**
     * pushes value for long predicate
     *
     * @param {TaggedToken} taggedToken
     * @param {TaggedToken[]} newTokens
     * @memberof LongPredicate
     */
    pushValue(taggedToken, newTokens) {
        if (taggedToken.type.isValue()) {
            newTokens.push(new TaggedToken_1.default("'" +
                taggedToken.token.substring(0, taggedToken.token.length - 1) +
                "'", new ValueToken_1.default()));
        }
    }
    /**
     * pushes identifier for long predicate
     *
     * @param {TaggedToken} taggedToken
     * @param {TaggedToken[]} newTokens
     * @memberof LongPredicate
     */
    pushIdentifier(taggedToken, newTokens) {
        if (taggedToken.type.isIdentifier()) {
            newTokens.push(new TaggedToken_1.default(`item.properties.${taggedToken.token}`, new IdentifierToken_1.default()));
        }
    }
    /**
     * pushes operator for long predicate
     *
     * @private
     * @param {TaggedToken} taggedToken
     * @param {TaggedToken[]} newTokens
     * @memberof LongPredicate
     */
    pushOperator(taggedToken, newTokens) {
        if (taggedToken.type.isOperator()) {
            newTokens.push(taggedToken);
        }
    }
}
exports.default = LongPredicate;
//# sourceMappingURL=LongPredicate.js.map